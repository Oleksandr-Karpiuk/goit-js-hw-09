{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAqCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA7CPQ,EAAAZ,GAASa,OAAOC,KAAK,CACnBX,SAAU,aACVY,QAAS,MAGXC,SAASC,cAAc,SAASC,iBAAiB,UAAU,SAAAC,GACzDA,EAAEC,iBAOF,IALA,IAAgCC,EAAAF,EAAEG,cAAcC,SAAxCC,EAAwBH,EAAxBjB,MAAOqB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OACfC,EAAaC,SAASJ,EAAMK,OAC5BC,EAAYF,SAASH,EAAKI,OAC1BE,EAAcH,SAASF,EAAOG,OAE3BG,EAAQ,EAAGA,EAAQD,EAAaC,GAAS,EAAG,CACnD,GAAIL,EAAa,GAAKG,EAAY,EAGhC,OAFAX,EAAEG,cAAcW,aAChBrB,EAAAZ,GAASa,OAAOqB,QAAQ,yBAK1BhC,EAAc8B,EADAA,EAAQF,EAAYH,GAE/BQ,MAAK,SAAAC,G,IAAGjC,EAAQiC,EAARjC,SAAUC,EAAKgC,EAALhC,M,OACjBQ,EAAAZ,GAASa,OAAOwB,QACd,qBAAwCC,OAAnBnC,EAAW,EAAE,QAAYmC,OAANlC,EAAM,M,IAGjDmC,OAAM,SAAAH,G,IAAGjC,EAAQiC,EAARjC,SAAUC,EAAKgC,EAALhC,M,OAClBQ,EAAAZ,GAASa,OAAOqB,QACd,oBAAuCI,OAAnBnC,EAAW,EAAE,QAAYmC,OAANlC,EAAM,M,IAGnDe,EAAEG,cAAcW,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nNotiflix.Notify.init({\n  position: 'center-top',\n  timeout: 5000,\n});\n\ndocument.querySelector('.form').addEventListener('submit', e => {\n  e.preventDefault();\n\n  const { delay, step, amount } = e.currentTarget.elements;\n  const delayValue = parseInt(delay.value);\n  const stepValue = parseInt(step.value);\n  const amountValue = parseInt(amount.value);\n\n  for (let index = 0; index < amountValue; index += 1) {\n    if (delayValue < 0 || stepValue < 0) {\n      e.currentTarget.reset();\n      Notiflix.Notify.failure('Введіть коректні дані');\n      return;\n    }\n\n    const delay = index * stepValue + delayValue;\n    createPromise(index, delay)\n      .then(({ position, delay }) =>\n        Notiflix.Notify.success(\n          `Fulfilled promise ${position + 1} in ${delay}ms`\n        )\n      )\n      .catch(({ position, delay }) =>\n        Notiflix.Notify.failure(\n          `Rejected promise ${position + 1} in ${delay}ms`\n        )\n      );\n    e.currentTarget.reset();\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$parcel$interopDefault","Notify","init","timeout","document","querySelector","addEventListener","e","preventDefault","_elements","currentTarget","elements","delay2","step","amount","delayValue","parseInt","value","stepValue","amountValue","index","reset","failure","then","param","success","concat","catch"],"version":3,"file":"03-promises.f29e8fbe.js.map"}